"use strict";(self.webpackChunkmg_af_docusaurus=self.webpackChunkmg_af_docusaurus||[]).push([[6107],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return f}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),c=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(a),f=n,p=m["".concat(d,".").concat(f)]||m[f]||s[f]||i;return a?r.createElement(p,l(l({ref:t},u),{},{components:a})):r.createElement(p,l({ref:t},u))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8008:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=a(7462),n=a(3366),i=(a(7294),a(3905)),l=["components"],o={sidebar_label:"generate_df",title:"test_utilities.generate_df"},d=void 0,c={unversionedId:"data-detective-airflow/data_detective_airflow_api_reference/test_utilities/generate_df",id:"data-detective-airflow/data_detective_airflow_api_reference/test_utilities/generate_df",isDocsHomePage:!1,title:"test_utilities.generate_df",description:"generate\\single\\dataframe",source:"@site/docs/data-detective-airflow/data_detective_airflow_api_reference/test_utilities/generate_df.md",sourceDirName:"data-detective-airflow/data_detective_airflow_api_reference/test_utilities",slug:"/data-detective-airflow/data_detective_airflow_api_reference/test_utilities/generate_df",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/test_utilities/generate_df",editUrl:"https://github.com/TinkoffCreditSystems/data-detective/edit/master/tools/doc-site/docs/data-detective-airflow/data_detective_airflow_api_reference/test_utilities/generate_df.md",tags:[],version:"current",frontMatter:{sidebar_label:"generate_df",title:"test_utilities.generate_df"},sidebar:"tutorialSidebar",previous:{title:"generate",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/test_utilities/generate"},next:{title:"test_helper",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/test_utilities/test_helper"}},u=[{value:"generate_single_dataframe",id:"generate_single_dataframe",children:[],level:4},{value:"generate_dfs_with_random_data",id:"generate_dfs_with_random_data",children:[],level:4},{value:"fill_table_from_dataframe",id:"fill_table_from_dataframe",children:[],level:4}],s={toc:u};function m(e){var t=e.components,a=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"generate_single_dataframe"},"generate","_","single","_","dataframe"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def generate_single_dataframe(columns: Dict, records_count: int = 2, max_str_len: int = 10, max_val_for_numeric_types: int = 100) -> DataFrame\n")),(0,i.kt)("p",null,"A method for generating a dataframe with random data"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"columns"),": Dictionary with columns, key - column, value - type (e.g. id: ","'","int","'",")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"records_count"),": Number of records in the source"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_str_len"),": Maximum length for string data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_val_for_numeric_types"),": Maximum value for numeric types")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("p",null,"DataFrame filled with generated data"),(0,i.kt)("h4",{id:"generate_dfs_with_random_data"},"generate","_","dfs","_","with","_","random","_","data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def generate_dfs_with_random_data(columns: Dict, dataframes_count: int = 10, records_count: int = 2, max_str_len: int = 10, max_val_for_numeric_types: int = 100) -> List\n")),(0,i.kt)("p",null,"Method for generating dataframes with random data"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},":param max_val_for_numeric_types: Maximum value for numeric types\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"columns"),": Dictionary with columns, key - column, value - type (e.g. id: ","'","int","'",")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dataframes_count"),": Number of sources"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"records_count"),": Number of records in the source"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_str_len"),": Maximum length for string data")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("p",null,"List of DataFrame with generated data"),(0,i.kt)("h4",{id:"fill_table_from_dataframe"},"fill","_","table","_","from","_","dataframe"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def fill_table_from_dataframe(conn: psycopg2.extensions.connection, dframe: DataFrame, schema: str, table: str) -> bool\n")),(0,i.kt)("p",null,"A method for filling a table with data from a dataframe.\nThe table must exist."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"conn"),": Connection to the database"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dframe"),": Dataframe with data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"schema"),": The scheme of the table in the database"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"table"),": Table name in the database")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("p",null,"Operation execution status: true-completed, otherwise false."))}m.isMDXComponent=!0}}]);