"use strict";(self.webpackChunkdata_detective_docusaurus=self.webpackChunkdata_detective_docusaurus||[]).push([[8598],{3905:function(e,t,n){n.d(t,{Zo:function(){return o},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},o=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,k=d["".concat(u,".").concat(c)]||d[c]||m[c]||l;return n?a.createElement(k,p(p({ref:t},o),{},{components:n})):a.createElement(k,p({ref:t},o))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,p=new Array(l);p[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var s=2;s<l;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5547:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return o},default:function(){return d}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),p=["components"],i={sidebar_label:"urn",title:"urn"},u=void 0,s={unversionedId:"data_detective_etl_api_reference/urn",id:"data_detective_etl_api_reference/urn",isDocsHomePage:!1,title:"urn",description:"get\\etl\\job",source:"@site/docs/data_detective_etl_api_reference/urn.md",sourceDirName:"data_detective_etl_api_reference",slug:"/data_detective_etl_api_reference/urn",permalink:"/data-detective/docs/data_detective_etl_api_reference/urn",editUrl:"https://github.com/TinkoffCreditSystems/data-detective/edit/master/tools/doc-site/docs/data_detective_etl_api_reference/urn.md",tags:[],version:"current",frontMatter:{sidebar_label:"urn",title:"urn"},sidebar:"tutorialSidebar",previous:{title:"dag_generator",permalink:"/data-detective/docs/data_detective_etl_api_reference/dag_generator"},next:{title:"utils",permalink:"/data-detective/docs/data_detective_etl_api_reference/utils"}},o=[{value:"get_etl_job",id:"get_etl_job",children:[],level:4},{value:"get_database",id:"get_database",children:[],level:4},{value:"get_schema",id:"get_schema",children:[],level:4},{value:"split_schema",id:"split_schema",children:[],level:4},{value:"get_table",id:"get_table",children:[],level:4},{value:"split_table",id:"split_table",children:[],level:4},{value:"get_column",id:"get_column",children:[],level:4},{value:"split_column",id:"split_column",children:[],level:4},{value:"get_tree_node",id:"get_tree_node",children:[],level:4}],m={toc:o};function d(e){var t=e.components,n=(0,r.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"get_etl_job"},"get","_","etl","_","job"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_etl_job(project: str, system: str, name: str) -> str\n")),(0,l.kt)("p",null,"Return the URN of ETL job"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"project"),": Name of the project: DWH, oracle, postgres"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"system"),": ETL tool name, e.g. sasdi"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name"),": ETL job","'","s name, e.g. DDS LOAD PARTY")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"urn"),(0,l.kt)("h4",{id:"get_database"},"get","_","database"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_database(db_type: str, location: str, database: str) -> str\n")),(0,l.kt)("p",null,"Return the URN of the database"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"db_type"),": DB type - postgres, mysql, greenplum, logical_model"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"location"),": address, url, uri"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"database"),": database name")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"urn, example - urn:database:postgres:pg:airflow"),(0,l.kt)("h4",{id:"get_schema"},"get","_","schema"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_schema(db_type: str, location: str, database: str, schema: str) -> str\n")),(0,l.kt)("p",null,"Return the URN of the database schema"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"db_type"),": DB type - postgres, mysql, greenplum, logical_model"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"location"),": address, url, uri"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"database"),": database name"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"schema"),": schema name")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"urn, example - urn:schema:postgres:pg:airflow:mart"),(0,l.kt)("h4",{id:"split_schema"},"split","_","schema"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def split_schema(urn: str) -> tuple[str, str, str, str]\n")),(0,l.kt)("p",null,"Split the URN of the database schema"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"urn"),": Schema URN")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"tuple from parameters required for URN"),(0,l.kt)("h4",{id:"get_table"},"get","_","table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_table(db_type: str, location: str, database: str, schema: str, table: str) -> str\n")),(0,l.kt)("p",null,"Return the URN of the database table"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"db_type"),": DB type - postgres, mysql, greenplum, logical_model"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"location"),": address, url, uri"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"database"),": database name"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"schema"),": schema name"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"table"),": table name, example - entity")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"urn, example - urn:table:postgres:pg:airflow:dds:entity"),(0,l.kt)("h4",{id:"split_table"},"split","_","table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def split_table(urn: str) -> tuple[str, str, str, str, str]\n")),(0,l.kt)("p",null,"Split the URN of the database table"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"urn"),": Database table URN")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"tuple from parameters required for URN"),(0,l.kt)("h4",{id:"get_column"},"get","_","column"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_column(db_type: str, location: str, database: str, schema: str, table: str, column: str) -> str\n")),(0,l.kt)("p",null,"Return the URN of the database table column"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"db_type"),": DB type - postgres, mysql, greenplum, logical_model"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"location"),": address, url, uri"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"database"),": database name"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"schema"),": schema name"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"table"),": table name, example - entity"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"column"),": column name, example - json_data")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"urn, example: urn:column:postgres:pg:airflow:dds:entity:json_data"),(0,l.kt)("h4",{id:"split_column"},"split","_","column"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def split_column(urn: str) -> tuple[str, str, str, str, str]\n")),(0,l.kt)("p",null,"Split the URN of the database column"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"urn"),": Column URN")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"tuple from parameters required for URN"),(0,l.kt)("h4",{id:"get_tree_node"},"get","_","tree","_","node"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_tree_node(nodes: Sequence[str]) -> str\n")),(0,l.kt)("p",null,"Return URN tree_node"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nodes"),": Hierarchy node name")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"))}d.isMDXComponent=!0}}]);