"use strict";(self.webpackChunkdata_detective_docusaurus=self.webpackChunkdata_detective_docusaurus||[]).push([[1421],{3905:function(e,r,t){t.d(r,{Zo:function(){return p},kt:function(){return m}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,d=u["".concat(c,".").concat(m)]||u[m]||f[m]||o;return t?n.createElement(d,i(i({ref:r},p),{},{components:t})):n.createElement(d,i({ref:r},p))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2958:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var n=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={sidebar_label:"py_transform",title:"operators.transformers.py_transform"},c=void 0,l={unversionedId:"data_detective_airflow_api_reference/operators/transformers/py_transform",id:"data_detective_airflow_api_reference/operators/transformers/py_transform",isDocsHomePage:!1,title:"operators.transformers.py_transform",description:"PyTransform Objects",source:"@site/docs/data_detective_airflow_api_reference/operators/transformers/py_transform.md",sourceDirName:"data_detective_airflow_api_reference/operators/transformers",slug:"/data_detective_airflow_api_reference/operators/transformers/py_transform",permalink:"/docs/data_detective_airflow_api_reference/operators/transformers/py_transform",editUrl:"https://github.com/tinkoff/data-detective/edit/master/tools/doc-site/docs/data_detective_airflow_api_reference/operators/transformers/py_transform.md",tags:[],version:"current",frontMatter:{sidebar_label:"py_transform",title:"operators.transformers.py_transform"},sidebar:"tutorialSidebar",previous:{title:"pg_sql",permalink:"/docs/data_detective_airflow_api_reference/operators/transformers/pg_sql"},next:{title:"assertions",permalink:"/docs/data_detective_airflow_api_reference/test_utilities/assertions"}},p=[{value:"PyTransform Objects",id:"pytransform-objects",children:[{value:"execute",id:"execute",children:[],level:4}],level:2}],f={toc:p};function u(e){var r=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"pytransform-objects"},"PyTransform Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class PyTransform(TBaseOperator)\n")),(0,o.kt)("p",null,"Perform in-memory conversion"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"source"),": List of sources"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"transformer"),": Handler (transformer) function"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"op_kwargs"),": Additional params for callable"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwargs"),": Additional params for TBaseOperator")),(0,o.kt)("h4",{id:"execute"},"execute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def execute(context: dict) -> None\n")),(0,o.kt)("p",null,"Only in-memory mode is supported\nSources are unpacked before entering the function.\nIf there are no sources, the function will not receive them in an empty list.\nThis can be avoided by using the following signature: def transformer(context, *sources):"),(0,o.kt)("p",null,"@param context: Execution context"))}u.isMDXComponent=!0}}]);