"use strict";(self.webpackChunkmg_af_docusaurus=self.webpackChunkmg_af_docusaurus||[]).push([[8966],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return f}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),s=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(a),f=r,m=u["".concat(d,".").concat(f)]||u[f]||c[f]||o;return a?n.createElement(m,i(i({ref:t},p),{},{components:a})):n.createElement(m,i({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7187:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),i=["components"],l={sidebar_label:"pg_scd1",title:"operators.sinks.pg_scd1"},d=void 0,s={unversionedId:"data-detective-airflow/data_detective_airflow_api_reference/operators/sinks/pg_scd1",id:"data-detective-airflow/data_detective_airflow_api_reference/operators/sinks/pg_scd1",isDocsHomePage:!1,title:"operators.sinks.pg_scd1",description:"PgSCD1 Objects",source:"@site/docs/data-detective-airflow/data_detective_airflow_api_reference/operators/sinks/pg_scd1.md",sourceDirName:"data-detective-airflow/data_detective_airflow_api_reference/operators/sinks",slug:"/data-detective-airflow/data_detective_airflow_api_reference/operators/sinks/pg_scd1",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/operators/sinks/pg_scd1",editUrl:"https://github.com/TinkoffCreditSystems/data-detective/edit/master/tools/doc-site/docs/data-detective-airflow/data_detective_airflow_api_reference/operators/sinks/pg_scd1.md",tags:[],version:"current",frontMatter:{sidebar_label:"pg_scd1",title:"operators.sinks.pg_scd1"},sidebar:"tutorialSidebar",previous:{title:"pg_loader",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/operators/sinks/pg_loader"},next:{title:"pg_scd1_df_update_insert",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/operators/sinks/pg_scd1_df_update_insert"}},p=[{value:"PgSCD1 Objects",id:"pgscd1-objects",children:[{value:"upload_and_update_insert",id:"upload_and_update_insert",children:[],level:4},{value:"get_table_columns",id:"get_table_columns",children:[],level:4}],level:2}],c={toc:p};function u(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"pgscd1-objects"},"PgSCD1 Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class PgSCD1(TBaseOperator)\n")),(0,o.kt)("p",null,"Update the target table by SCD1"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    loading_method - Download method: Update/Insert (U/I), Delete/Insert(D/I)\n    process_deletions - records that are not in the input temporary will be deleted\n    process_existing_records - records that are not different will not be affected\n    chunk_row_number - the number of rows in the chunk to load into the database and apply to the table\n                       only for Update/Insert and DataFrame mode\n")),(0,o.kt)("p",null,"process_existing_records for U/I is enabled by default."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"source"),": Source"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"conn_id"),": Connection id"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"table_name"),": Table name for update"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"key"),": The key by which update. Avoid NULL for the key."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"deleted_flg_column"),": Field with the delete flag, takes the values 0/1"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwargs"),": ")),(0,o.kt)("h4",{id:"upload_and_update_insert"},"upload","_","and","_","update","_","insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def upload_and_update_insert(hook: PostgresHook, source_table: str, dataframe: pandas.DataFrame) -> None\n")),(0,o.kt)("p",null,"Load the DataFrame into the database and apply the table to the target."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hook"),": Hook for connecting to the database"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"source_table"),": Name for the temporary table in the database"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dataframe"),": DataFrame to apply to a table")),(0,o.kt)("h4",{id:"get_table_columns"},"get","_","table","_","columns"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef get_table_columns(table_name: str, conn: psycopg2_connection) -> list[str]\n")),(0,o.kt)("p",null,"Get a list of the names of its fields by the name of the table"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"table_name"),": "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"conn"),": ")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("p",null,"Tuple with field names"))}u.isMDXComponent=!0}}]);