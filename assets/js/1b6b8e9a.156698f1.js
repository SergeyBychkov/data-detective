"use strict";(self.webpackChunkdata_detective_docusaurus=self.webpackChunkdata_detective_docusaurus||[]).push([[7491],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return _}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),_=n,h=u["".concat(l,".").concat(_)]||u[_]||d[_]||o;return r?a.createElement(h,s(s({ref:t},p),{},{components:r})):a.createElement(h,s({ref:t},p))}));function _(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6792:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),s=["components"],i={sidebar_label:"base_db_work",title:"dag_generator.works.base_db_work"},l=void 0,c={unversionedId:"data_detective_airflow_api_reference/dag_generator/works/base_db_work",id:"data_detective_airflow_api_reference/dag_generator/works/base_db_work",isDocsHomePage:!1,title:"dag_generator.works.base_db_work",description:"TBaseFileWork",source:"@site/docs/data_detective_airflow_api_reference/dag_generator/works/base_db_work.md",sourceDirName:"data_detective_airflow_api_reference/dag_generator/works",slug:"/data_detective_airflow_api_reference/dag_generator/works/base_db_work",permalink:"/docs/data_detective_airflow_api_reference/dag_generator/works/base_db_work",editUrl:"https://github.com/tinkoff/data-detective/edit/master/tools/doc-site/docs/data_detective_airflow_api_reference/dag_generator/works/base_db_work.md",tags:[],version:"current",frontMatter:{sidebar_label:"base_db_work",title:"dag_generator.works.base_db_work"},sidebar:"tutorialSidebar",previous:{title:"pickle_result",permalink:"/docs/data_detective_airflow_api_reference/dag_generator/results/pickle_result"},next:{title:"base_file_work",permalink:"/docs/data_detective_airflow_api_reference/dag_generator/works/base_file_work"}},p=[{value:"BaseDBWork Objects",id:"basedbwork-objects",children:[{value:"get_xcom_params",id:"get_xcom_params",children:[],level:4},{value:"exists",id:"exists",children:[],level:4},{value:"drop",id:"drop",children:[],level:4},{value:"set_search_path",id:"set_search_path",children:[],level:4},{value:"is_schema",id:"is_schema",children:[],level:4},{value:"is_table",id:"is_table",children:[],level:4},{value:"is_view",id:"is_view",children:[],level:4},{value:"execute",id:"execute",children:[],level:4},{value:"terminate_failed_task_query",id:"terminate_failed_task_query",children:[],level:4}],level:2}],d={toc:p};function u(e){var t=e.components,r=(0,n.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"TBaseFileWork"),(0,o.kt)("p",null,"The module contains an abstract base class TBaseDBWork\nDescribes the work interface for databases (Postgres, Greenplum, MySQL)"),(0,o.kt)("h2",{id:"basedbwork-objects"},"BaseDBWork Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class BaseDBWork(BaseWork)\n")),(0,o.kt)("p",null,"Base class for working on a database (Postgres, Greenplum, MySQL)"),(0,o.kt)("h4",{id:"get_xcom_params"},"get","_","xcom","_","params"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_xcom_params(context: dict) -> dict\n")),(0,o.kt)("p",null,"Serialize DBwork into a dictionary for writing to XCom"),(0,o.kt)("h4",{id:"exists"},"exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef exists(path: str) -> bool\n")),(0,o.kt)("p",null,"Check if the object exists\n@param path: Path to the object\n@return:"),(0,o.kt)("h4",{id:"drop"},"drop"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef drop(path: str)\n")),(0,o.kt)("p",null,"Delete an object by path\n@param path: Path to the object\n@return:"),(0,o.kt)("h4",{id:"set_search_path"},"set","_","search","_","path"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef set_search_path(search_path: str)\n")),(0,o.kt)("p",null,"Set up the search_path\n@param search_path: search_path\n@return:"),(0,o.kt)("h4",{id:"is_schema"},"is","_","schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef is_schema(path: str) -> bool\n")),(0,o.kt)("p",null,"Check if the object is a schema\n@param path: Path to the object\n@return:"),(0,o.kt)("h4",{id:"is_table"},"is","_","table"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef is_table(path: str) -> bool\n")),(0,o.kt)("p",null,"Check if the object is a table\n@param path: Path to the object\n@return:"),(0,o.kt)("h4",{id:"is_view"},"is","_","view"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef is_view(path: str) -> bool\n")),(0,o.kt)("p",null,"Check whether an object is a view\n@param path: Path to the object\n@return:"),(0,o.kt)("h4",{id:"execute"},"execute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef execute(sql: str)\n")),(0,o.kt)("p",null,"Exeute sql\n@param sql: SQL query\n@return:"),(0,o.kt)("h4",{id:"terminate_failed_task_query"},"terminate","_","failed","_","task","_","query"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef terminate_failed_task_query(context: dict)\n")),(0,o.kt)("p",null,"Stop executing the request after receiving the fail status of the task\n@param context: Task context\n@return:"))}u.isMDXComponent=!0}}]);