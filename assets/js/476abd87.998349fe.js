"use strict";(self.webpackChunkmg_af_docusaurus=self.webpackChunkmg_af_docusaurus||[]).push([[3016],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return _}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=l(r),_=a,m=d["".concat(p,".").concat(_)]||d[_]||u[_]||o;return r?n.createElement(m,c(c({ref:t},s),{},{components:r})):n.createElement(m,c({ref:t},s))}));function _(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3230:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return s},default:function(){return d}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),c=["components"],i={sidebar_label:"pg_work",title:"dag_generator.works.pg_work"},p=void 0,l={unversionedId:"data_detective_airflow_api_reference/dag_generator/works/pg_work",id:"data_detective_airflow_api_reference/dag_generator/works/pg_work",isDocsHomePage:!1,title:"dag_generator.works.pg_work",description:"PgWork Objects",source:"@site/docs/data_detective_airflow_api_reference/dag_generator/works/pg_work.md",sourceDirName:"data_detective_airflow_api_reference/dag_generator/works",slug:"/data_detective_airflow_api_reference/dag_generator/works/pg_work",permalink:"/data-detective/docs/data_detective_airflow_api_reference/dag_generator/works/pg_work",editUrl:"https://github.com/TinkoffCreditSystems/data-detective/edit/master/tools/doc-site/docs/data_detective_airflow_api_reference/dag_generator/works/pg_work.md",tags:[],version:"current",frontMatter:{sidebar_label:"pg_work",title:"dag_generator.works.pg_work"},sidebar:"tutorialSidebar",previous:{title:"file_work",permalink:"/data-detective/docs/data_detective_airflow_api_reference/dag_generator/works/file_work"},next:{title:"s3_work",permalink:"/data-detective/docs/data_detective_airflow_api_reference/dag_generator/works/s3_work"}},s=[{value:"PgWork Objects",id:"pgwork-objects",children:[{value:"execute",id:"execute",children:[],level:4},{value:"get_object_type_by_path",id:"get_object_type_by_path",children:[],level:4},{value:"is_schema",id:"is_schema",children:[],level:4},{value:"is_table",id:"is_table",children:[],level:4},{value:"is_view",id:"is_view",children:[],level:4},{value:"exists",id:"exists",children:[],level:4},{value:"set_search_path",id:"set_search_path",children:[],level:4},{value:"drop",id:"drop",children:[],level:4},{value:"write_df",id:"write_df",children:[],level:4},{value:"get_size",id:"get_size",children:[],level:4}],level:2}],u={toc:s};function d(e){var t=e.components,r=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"pgwork-objects"},"PgWork Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class PgWork(BaseDBWork)\n")),(0,o.kt)("p",null,"Work based on postgres"),(0,o.kt)("h4",{id:"execute"},"execute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@provide_arg('conn', provide_conn)\n@provide_arg('cur', provide_cur)\ndef execute(sql: str, conn: connection = None, cur: cursor = None, fetch: Optional[str] = None, context: Optional[dict] = None) -> Union[None, tuple, list]\n")),(0,o.kt)("p",null,"Execute SQL script\n@param sql: SQL-script\n@param conn: Connection to db\n@param cur: Cursor\n@param fetch: None - do not get the result, one - return 1, all - return all\n@param context: None - Context for syncing a work in XCom\n@return:"),(0,o.kt)("h4",{id:"get_object_type_by_path"},"get","_","object","_","type","_","by","_","path"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@provide_arg('conn', provide_conn)\n@provide_arg('cur', provide_cur)\ndef get_object_type_by_path(path: str, conn: connection = None, cur: cursor = None) -> Union[str, None]\n")),(0,o.kt)("p",null,"The method determines the result type by path. If there is no object\nDBObjectType.NONE.value will be returned."),(0,o.kt)("p",null,"The input is expected to be path in the form of schema.table_name, so tables and views\nfrom the schema located in search_path must be set EXPLICITLY using the schema."),(0,o.kt)("p",null,"Using the DB name in path will also lead to an ERROR"),(0,o.kt)("h4",{id:"is_schema"},"is","_","schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@provide_arg('conn', provide_conn)\n@provide_arg('cur', provide_cur)\ndef is_schema(path: str, conn: connection = None, cur: cursor = None) -> bool\n")),(0,o.kt)("p",null,"Check if the object is a schema\n@param path: Schema.table\n@param conn: Connection to db\n@param cur: Cursor\n@return:"),(0,o.kt)("h4",{id:"is_table"},"is","_","table"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@provide_arg('conn', provide_conn)\n@provide_arg('cur', provide_cur)\ndef is_table(path: str, conn: connection = None, cur: cursor = None) -> bool\n")),(0,o.kt)("p",null,"Check if the object is a table\n@param path: schema.table\n@param conn: Connection to db\n@param cur: Cursor\n@return:"),(0,o.kt)("h4",{id:"is_view"},"is","_","view"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@provide_arg('conn', provide_conn)\n@provide_arg('cur', provide_cur)\ndef is_view(path: str, conn: connection = None, cur: cursor = None) -> bool\n")),(0,o.kt)("p",null,"Check if the object is a view\n@param path: schema.table\n@param conn: Connection to db\n@param cur: Cursor\n@return:"),(0,o.kt)("h4",{id:"exists"},"exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@provide_arg('conn', provide_conn)\n@provide_arg('cur', provide_cur)\ndef exists(path: str, conn: connection = None, cur: cursor = None) -> bool\n")),(0,o.kt)("p",null,"Check if the object exists\n@param path: schema.table\n@param conn: Connection to db\n@param cur: Cursor\n@return:"),(0,o.kt)("h4",{id:"set_search_path"},"set","_","search","_","path"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@provide_arg('conn', provide_conn)\n@provide_arg('cur', provide_cur)\ndef set_search_path(search_path: str, conn: connection = None, cur: cursor = None)\n")),(0,o.kt)("p",null,"Set search_path\n@param search_path: search_path\n@param conn: Connection to db\n@param cur: Cursor"),(0,o.kt)("h4",{id:"drop"},"drop"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@provide_arg('conn', provide_conn)\n@provide_arg('cur', provide_cur)\ndef drop(path: str, conn: connection = None, cur: cursor = None, cascade: bool = True)\n")),(0,o.kt)("p",null,"Drop the object by path\n@param path: Path to the object\n@param conn: Connection to db\n@param cur: Cursor\n@param cascade: Delete dependent objects"),(0,o.kt)("h4",{id:"write_df"},"write","_","df"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def write_df(path: str, frame: DataFrame, **kwargs)\n")),(0,o.kt)("p",null,"Upload DataFrame to TEMPORARY TABLE postgres"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("p",null,"The Data Frame index is excluded from loading.\nDefault params:\nchunksize: 1000\nmethod: ","'","multi","'"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"path"),": Table name"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"frame"),": DataFrame"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwargs"),": Additional params")),(0,o.kt)("h4",{id:"get_size"},"get","_","size"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_size(path: str) -> str\n")),(0,o.kt)("p",null,"Get the size of the object in the database.\nIn case of no table returns -1"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"path"),": Object name")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("p",null,"Rounded object size"))}d.isMDXComponent=!0}}]);