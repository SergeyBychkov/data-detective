"use strict";(self.webpackChunkdata_detective_docusaurus=self.webpackChunkdata_detective_docusaurus||[]).push([[9199],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return k}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(r),k=n,_=u["".concat(c,".").concat(k)]||u[k]||d[k]||o;return r?a.createElement(_,l(l({ref:t},p),{},{components:r})):a.createElement(_,l({ref:t},p))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4482:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),l=["components"],i={sidebar_label:"base_work",title:"dag_generator.works.base_work"},c=void 0,s={unversionedId:"data_detective_airflow_api_reference/dag_generator/works/base_work",id:"data_detective_airflow_api_reference/dag_generator/works/base_work",isDocsHomePage:!1,title:"dag_generator.works.base_work",description:"TBaseWork",source:"@site/docs/data_detective_airflow_api_reference/dag_generator/works/base_work.md",sourceDirName:"data_detective_airflow_api_reference/dag_generator/works",slug:"/data_detective_airflow_api_reference/dag_generator/works/base_work",permalink:"/data-detective/docs/data_detective_airflow_api_reference/dag_generator/works/base_work",editUrl:"https://github.com/TinkoffCreditSystems/data-detective/edit/master/tools/doc-site/docs/data_detective_airflow_api_reference/dag_generator/works/base_work.md",tags:[],version:"current",frontMatter:{sidebar_label:"base_work",title:"dag_generator.works.base_work"},sidebar:"tutorialSidebar",previous:{title:"base_file_work",permalink:"/data-detective/docs/data_detective_airflow_api_reference/dag_generator/works/base_file_work"},next:{title:"file_work",permalink:"/data-detective/docs/data_detective_airflow_api_reference/dag_generator/works/file_work"}},p=[{value:"WorkType Objects",id:"worktype-objects",children:[{value:"synchronize",id:"synchronize",children:[],level:4}],level:2},{value:"BaseWork Objects",id:"basework-objects",children:[{value:"get_path",id:"get_path",children:[],level:4},{value:"create",id:"create",children:[],level:4},{value:"clear",id:"clear",children:[],level:4},{value:"get_xcom_key",id:"get_xcom_key",children:[],level:4},{value:"get_xcom_params",id:"get_xcom_params",children:[],level:4},{value:"set_params",id:"set_params",children:[],level:4},{value:"get_hook",id:"get_hook",children:[],level:4},{value:"get_size",id:"get_size",children:[],level:4}],level:2}],d={toc:p};function u(e){var t=e.components,r=(0,n.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"TBaseWork"),(0,o.kt)("p",null,"The module contains abstract base classes:\nTBaseWork, describing the logic of working with Work\nTWorktype, containing all possible types of Works\nWork - a place to store temporary objects that appear as a result of the Task"),(0,o.kt)("h2",{id:"worktype-objects"},"WorkType Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class WorkType(Enum)\n")),(0,o.kt)("p",null,"A class for all types of works.\nIt is allowed to use only these types of works.\nWriting types of works is highly not recommended.."),(0,o.kt)("h4",{id:"synchronize"},"synchronize"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def synchronize(func: Callable) -> Callable\n")),(0,o.kt)("p",null,"Decorator, which means that the action is to update the state of the object in xcom"),(0,o.kt)("h2",{id:"basework-objects"},"BaseWork Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class BaseWork(ABC,  LoggingMixin)\n")),(0,o.kt)("p",null,"Base class for processing work\nwork_type: Work type (pickle, pg, gp)\nNote: each worker will have its own instance of this class created, so one worker will not know that a work has already been created in another worker"),(0,o.kt)("h4",{id:"get_path"},"get","_","path"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_path(context: Dict, prefix: str = 'work_airflow')\n")),(0,o.kt)("p",null,"Return a unique work name for this context\n(for dag_run)\nImportant note! The name of the work is uniquely determined by dag_run"),(0,o.kt)("h4",{id:"create"},"create"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@synchronize\ndef create(context: dict)\n")),(0,o.kt)("p",null,"Create a work.\nThis method does not contain creation logic.\nThe logic of creating specific works in _create_logic"),(0,o.kt)("h4",{id:"clear"},"clear"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@synchronize\ndef clear(context: dict)\n")),(0,o.kt)("p",null,"Delete a work\nThis method does not contain delete logic.\nThe logic of deleting specific works in _clear_logic"),(0,o.kt)("h4",{id:"get_xcom_key"},"get","_","xcom","_","key"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_xcom_key(context: Dict)\n")),(0,o.kt)("p",null,"Return the key for XCom for the current work and task"),(0,o.kt)("h4",{id:"get_xcom_params"},"get","_","xcom","_","params"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_xcom_params(context: Dict) -> Dict\n")),(0,o.kt)("p",null,"Serialize work to a dictionary for writing to XCom"),(0,o.kt)("h4",{id:"set_params"},"set","_","params"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def set_params(params: Optional[dict[str, Any]] = None)\n")),(0,o.kt)("p",null,"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0430"),(0,o.kt)("h4",{id:"get_hook"},"get","_","hook"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef get_hook()\n")),(0,o.kt)("p",null,"Return the hook for work connection_id"),(0,o.kt)("h4",{id:"get_size"},"get","_","size"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef get_size(path) -> str\n")),(0,o.kt)("p",null,"Return the size of result in a readable format"))}u.isMDXComponent=!0}}]);