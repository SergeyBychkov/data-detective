"use strict";(self.webpackChunkmg_af_docusaurus=self.webpackChunkmg_af_docusaurus||[]).push([[9282],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return g}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),c=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(a),g=n,f=p["".concat(d,".").concat(g)]||p[g]||u[g]||i;return a?r.createElement(f,o(o({ref:t},s),{},{components:a})):r.createElement(f,o({ref:t},s))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3708:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var r=a(7462),n=a(3366),i=(a(7294),a(3905)),o=["components"],l={sidebar_label:"yaml_dag",title:"dag_generator.dags.yaml_dag"},d=void 0,c={unversionedId:"data-detective-airflow/data_detective_airflow_api_reference/dag_generator/dags/yaml_dag",id:"data-detective-airflow/data_detective_airflow_api_reference/dag_generator/dags/yaml_dag",isDocsHomePage:!1,title:"dag_generator.dags.yaml_dag",description:"YamlDag Objects",source:"@site/docs/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/dags/yaml_dag.md",sourceDirName:"data-detective-airflow/data_detective_airflow_api_reference/dag_generator/dags",slug:"/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/dags/yaml_dag",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/dags/yaml_dag",editUrl:"https://github.com/TinkoffCreditSystems/data-detective/edit/master/tools/doc-site/docs/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/dags/yaml_dag.md",tags:[],version:"current",frontMatter:{sidebar_label:"yaml_dag",title:"dag_generator.dags.yaml_dag"},sidebar:"tutorialSidebar",previous:{title:"tdag",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/dags/tdag"},next:{title:"base_result",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/results/base_result"}},s=[{value:"YamlDag Objects",id:"yamldag-objects",children:[{value:"attach_task",id:"attach_task",children:[],level:4}],level:2}],u={toc:s};function p(e){var t=e.components,a=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"yamldag-objects"},"YamlDag Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class YamlDag(TDag)\n")),(0,i.kt)("p",null,"DAG created based on the description in the yaml file"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dag_dir"),": Directory with TDag.META_FILE"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"config"),": Optional and decomposed meta.yaml file")),(0,i.kt)("h4",{id:"attach_task"},"attach","_","task"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def attach_task(task: dict) -> None\n")),(0,i.kt)("p",null,"Add task to DAG"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"task"),": Dictionary with task attributes")))}p.isMDXComponent=!0}}]);