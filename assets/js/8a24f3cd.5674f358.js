"use strict";(self.webpackChunkmg_af_docusaurus=self.webpackChunkmg_af_docusaurus||[]).push([[3718],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return _}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),u=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),_=a,f=p["".concat(o,".").concat(_)]||p[_]||d[_]||i;return r?n.createElement(f,l(l({ref:t},c),{},{components:r})):n.createElement(f,l({ref:t},c))}));function _(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2491:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],s={sidebar_label:"test_helper",title:"test_utilities.test_helper"},o=void 0,u={unversionedId:"data_detective_airflow_api_reference/test_utilities/test_helper",id:"data_detective_airflow_api_reference/test_utilities/test_helper",isDocsHomePage:!1,title:"test_utilities.test_helper",description:"Helper for creating DAG tests",source:"@site/docs/data_detective_airflow_api_reference/test_utilities/test_helper.md",sourceDirName:"data_detective_airflow_api_reference/test_utilities",slug:"/data_detective_airflow_api_reference/test_utilities/test_helper",permalink:"/data-detective/docs/data_detective_airflow_api_reference/test_utilities/test_helper",editUrl:"https://github.com/TinkoffCreditSystems/data-detective/edit/master/tools/doc-site/docs/data_detective_airflow_api_reference/test_utilities/test_helper.md",tags:[],version:"current",frontMatter:{sidebar_label:"test_helper",title:"test_utilities.test_helper"},sidebar:"tutorialSidebar",previous:{title:"generate_df",permalink:"/data-detective/docs/data_detective_airflow_api_reference/test_utilities/generate_df"},next:{title:"dag_generator",permalink:"/data-detective/docs/data_detective_etl_api_reference/dag_generator"}},c=[{value:"run_task",id:"run_task",children:[],level:4},{value:"run_and_read",id:"run_and_read",children:[],level:4},{value:"run_and_assert_task",id:"run_and_assert_task",children:[],level:4},{value:"run_and_assert",id:"run_and_assert",children:[],level:4}],d={toc:c};function p(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Helper for creating DAG tests"),(0,i.kt)("h4",{id:"run_task"},"run","_","task"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def run_task(task: Union[TBaseOperator, BaseOperator], context: dict = None)\n")),(0,i.kt)("p",null,"Run a task"),(0,i.kt)("h4",{id:"run_and_read"},"run","_","and","_","read"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def run_and_read(task: Union[TBaseOperator, BaseOperator], context: dict = None) -> DataFrame\n")),(0,i.kt)("p",null,"Run the task and return the DataFrame from the BaseResult instance."),(0,i.kt)("h4",{id:"run_and_assert_task"},"run","_","and","_","assert","_","task"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def run_and_assert_task(task: Union[TBaseOperator, BaseOperator], dataset: dict[str, Any], mocker: MockerFixture = None, exclude_cols: list = None, **kwargs)\n")),(0,i.kt)("p",null,"Run the task, get the result and compare"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"task"),": Id of the running task"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dataset"),": Dictionary with comparison examples. Output and input datasets are needed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exclude_cols"),": Columns excluded from comparison"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mocker"),": MockerFixture fixture")),(0,i.kt)("h4",{id:"run_and_assert"},"run","_","and","_","assert"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def run_and_assert(dag: TDag, task_id: str, test_datasets: dict, mocker: MockerFixture, exclude_cols: list = None)\n")),(0,i.kt)("p",null,"Using run_and_assert_task"),(0,i.kt)("p",null,"Run the task and if it is TBaseOperator then get the result and compare it with the example\nAlso if the task is PgReplacePartitions then the target table will be cleared first,\nand then after the launch, compare the contents of the target table with the example"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dag"),": TDag"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"task_id"),": Id of the running task"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test_datasets"),": Dictionary with examples"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exclude_cols"),": Columns excluded from comparison"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mocker"),": MockerFixture fixture")))}p.isMDXComponent=!0}}]);