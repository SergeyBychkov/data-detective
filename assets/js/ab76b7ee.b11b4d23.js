"use strict";(self.webpackChunkmg_af_docusaurus=self.webpackChunkmg_af_docusaurus||[]).push([[6107],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),d=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(r),f=o,g=u["".concat(c,".").concat(f)]||u[f]||p[f]||a;return r?n.createElement(g,i(i({ref:t},s),{},{components:r})):n.createElement(g,i({ref:t},s))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5280:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return s},default:function(){return u}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],l={id:"production"},c="Production",d={unversionedId:"data-detective-airflow/production",id:"data-detective-airflow/production",isDocsHomePage:!1,title:"Production",description:"The start point for generating DAGs is a file in the airflow.settings.DATA_FOLDER with the following contents:",source:"@site/docs/data-detective-airflow/production.md",sourceDirName:"data-detective-airflow",slug:"/data-detective-airflow/production",permalink:"/data-detective/docs/data-detective-airflow/production",editUrl:"https://github.com/TinkoffCreditSystems/data-detective/edit/master/tools/doc-site/docs/data-detective-airflow/production.md",tags:[],version:"current",frontMatter:{id:"production"},sidebar:"tutorialSidebar",previous:{title:"DAG testing",permalink:"/data-detective/docs/data-detective-airflow/testing"},next:{title:"Comparison with other frameworks",permalink:"/data-detective/docs/data-detective-airflow/comparison"}},s=[],p={toc:s};function u(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"production"},"Production"),(0,a.kt)("p",null,"The start point for generating DAGs is a file in the airflow.settings.DATA_FOLDER with the following contents:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import sys\n\nimport argcomplete\nfrom airflow.cli.cli_parser import get_parser\n\nfrom data_detective_airflow.constants import DAG_ID_KEY\nfrom data_detective_airflow.dag_generator import dag_generator\n\ndag_id = None\nif sys.argv[0].endswith('airflow'):\n    parser = get_parser()\n    argcomplete.autocomplete(parser)\n    args = parser.parse_args()\n    dag_id = getattr(args, DAG_ID_KEY, None)\n\nwhitelist = [dag_id] if dag_id else []\nfor dag in dag_generator(dag_id_whitelist=whitelist):\n    if not dag:\n        continue\n    globals()['dag_' + dag.dag_id] = dag\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Next to the file ",(0,a.kt)("inlineCode",{parentName:"li"},"dags/dag_generator.py ")," it is worth placing the file ",(0,a.kt)("inlineCode",{parentName:"li"},".airflowignore")," with the contents of ",(0,a.kt)("inlineCode",{parentName:"li"},"dags"),".\nThis will prevent scanning of py files in the dags folder."),(0,a.kt)("li",{parentName:"ul"},"dags/dag_generator.py - the only one entry point to the DAGs. Therefore, it does not make sense to parallelize the process of scanning DAGs."),(0,a.kt)("li",{parentName:"ul"},"At the end of the TDag operation (successful or unsuccessful), the cleanup of all work is called. This process is logged in scheduler.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cat dag_generator.py.log | grep callback\n>2021-05-08 07:23:30,865|INFO|logging_mixin.py:104|>2021-05-08 07:23:30,864|INFO|dag.py:853|Executing dag callback function: <bound method clear_all_works of <DAG: dummy_s3>>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The launch of ",(0,a.kt)("inlineCode",{parentName:"li"},"airflow worker")," should not occur from the root user, for this the ",(0,a.kt)("inlineCode",{parentName:"li"},"airflow")," user is added to the image."),(0,a.kt)("li",{parentName:"ul"},"Python modules are installed in ",(0,a.kt)("inlineCode",{parentName:"li"},"${AIRFLOW_USER_HOME}/.local/bin")),(0,a.kt)("li",{parentName:"ul"},"AIR FLOW_HOME can be moved to the /app folder")))}u.isMDXComponent=!0}}]);