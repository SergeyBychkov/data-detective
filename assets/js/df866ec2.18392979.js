"use strict";(self.webpackChunkmg_af_docusaurus=self.webpackChunkmg_af_docusaurus||[]).push([[3054],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return _}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(a),_=n,h=u["".concat(s,".").concat(_)]||u[_]||p[_]||o;return a?r.createElement(h,i(i({ref:t},d),{},{components:a})):r.createElement(h,i({ref:t},d))}));function _(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4727:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var r=a(7462),n=a(3366),o=(a(7294),a(3905)),i=["components"],l={sidebar_label:"base_db_work",title:"dag_generator.works.base_db_work"},s=void 0,c={unversionedId:"data-detective-airflow/data_detective_airflow_api_reference/dag_generator/works/base_db_work",id:"data-detective-airflow/data_detective_airflow_api_reference/dag_generator/works/base_db_work",isDocsHomePage:!1,title:"dag_generator.works.base_db_work",description:"TBaseFileWork",source:"@site/docs/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/works/base_db_work.md",sourceDirName:"data-detective-airflow/data_detective_airflow_api_reference/dag_generator/works",slug:"/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/works/base_db_work",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/works/base_db_work",editUrl:"https://github.com/TinkoffCreditSystems/data-detective/edit/master/tools/doc-site/docs/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/works/base_db_work.md",tags:[],version:"current",frontMatter:{sidebar_label:"base_db_work",title:"dag_generator.works.base_db_work"},sidebar:"tutorialSidebar",previous:{title:"pickle_result",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/results/pickle_result"},next:{title:"base_file_work",permalink:"/data-detective/docs/data-detective-airflow/data_detective_airflow_api_reference/dag_generator/works/base_file_work"}},d=[{value:"BaseDBWork Objects",id:"basedbwork-objects",children:[{value:"get_xcom_params",id:"get_xcom_params",children:[],level:4},{value:"exists",id:"exists",children:[],level:4},{value:"drop",id:"drop",children:[],level:4},{value:"set_search_path",id:"set_search_path",children:[],level:4},{value:"is_schema",id:"is_schema",children:[],level:4},{value:"is_table",id:"is_table",children:[],level:4},{value:"is_view",id:"is_view",children:[],level:4},{value:"execute",id:"execute",children:[],level:4},{value:"terminate_failed_task_query",id:"terminate_failed_task_query",children:[],level:4}],level:2}],p={toc:d};function u(e){var t=e.components,a=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"TBaseFileWork"),(0,o.kt)("p",null,"The module contains an abstract base class TBaseDBWork\nDescribes the work interface for databases (Postgres, Greenplum, MySQL)"),(0,o.kt)("h2",{id:"basedbwork-objects"},"BaseDBWork Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class BaseDBWork(BaseWork)\n")),(0,o.kt)("p",null,"Base class for working on a database (Postgres, Greenplum, MySQL)"),(0,o.kt)("h4",{id:"get_xcom_params"},"get","_","xcom","_","params"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_xcom_params(context: dict) -> dict\n")),(0,o.kt)("p",null,"Serialize DBwork into a dictionary for writing to XCom"),(0,o.kt)("h4",{id:"exists"},"exists"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef exists(path: str) -> bool\n")),(0,o.kt)("p",null,"Check if the object exists\n@param path: Path to the object\n@return:"),(0,o.kt)("h4",{id:"drop"},"drop"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef drop(path: str)\n")),(0,o.kt)("p",null,"Delete an object by path\n@param path: Path to the object\n@return:"),(0,o.kt)("h4",{id:"set_search_path"},"set","_","search","_","path"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef set_search_path(search_path: str)\n")),(0,o.kt)("p",null,"Set up the search_path\n@param search_path: search_path\n@return:"),(0,o.kt)("h4",{id:"is_schema"},"is","_","schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef is_schema(path: str) -> bool\n")),(0,o.kt)("p",null,"Check if the object is a schema\n@param path: Path to the object\n@return:"),(0,o.kt)("h4",{id:"is_table"},"is","_","table"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef is_table(path: str) -> bool\n")),(0,o.kt)("p",null,"Check if the object is a table\n@param path: Path to the object\n@return:"),(0,o.kt)("h4",{id:"is_view"},"is","_","view"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef is_view(path: str) -> bool\n")),(0,o.kt)("p",null,"Check whether an object is a view\n@param path: Path to the object\n@return:"),(0,o.kt)("h4",{id:"execute"},"execute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef execute(sql: str)\n")),(0,o.kt)("p",null,"Exeute sql\n@param sql: SQL query\n@return:"),(0,o.kt)("h4",{id:"terminate_failed_task_query"},"terminate","_","failed","_","task","_","query"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef terminate_failed_task_query(context: dict)\n")),(0,o.kt)("p",null,"Stop executing the request after receiving the fail status of the task\n@param context: Task context\n@return:"))}u.isMDXComponent=!0}}]);