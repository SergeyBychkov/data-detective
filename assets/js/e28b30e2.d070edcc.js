"use strict";(self.webpackChunkdata_detective_docusaurus=self.webpackChunkdata_detective_docusaurus||[]).push([[3992],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,_=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(_,l(l({ref:t},c),{},{components:n})):r.createElement(_,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},742:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={sidebar_label:"pg_scd1",title:"operators.sinks.pg_scd1"},p=void 0,s={unversionedId:"data_detective_airflow_api_reference/operators/sinks/pg_scd1",id:"data_detective_airflow_api_reference/operators/sinks/pg_scd1",isDocsHomePage:!1,title:"operators.sinks.pg_scd1",description:"PgSCD1 Objects",source:"@site/docs/data_detective_airflow_api_reference/operators/sinks/pg_scd1.md",sourceDirName:"data_detective_airflow_api_reference/operators/sinks",slug:"/data_detective_airflow_api_reference/operators/sinks/pg_scd1",permalink:"/docs/data_detective_airflow_api_reference/operators/sinks/pg_scd1",editUrl:"https://github.com/tinkoff/data-detective/edit/master/tools/doc-site/docs/data_detective_airflow_api_reference/operators/sinks/pg_scd1.md",tags:[],version:"current",frontMatter:{sidebar_label:"pg_scd1",title:"operators.sinks.pg_scd1"},sidebar:"tutorialSidebar",previous:{title:"pg_loader",permalink:"/docs/data_detective_airflow_api_reference/operators/sinks/pg_loader"},next:{title:"pg_scd1_df_update_insert",permalink:"/docs/data_detective_airflow_api_reference/operators/sinks/pg_scd1_df_update_insert"}},c=[{value:"PgSCD1 Objects",id:"pgscd1-objects",children:[{value:"upload_and_update_insert",id:"upload_and_update_insert",children:[],level:4},{value:"get_table_columns",id:"get_table_columns",children:[],level:4}],level:2}],d={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"pgscd1-objects"},"PgSCD1 Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class PgSCD1(TBaseOperator)\n")),(0,o.kt)("p",null,"Update the target table by SCD1"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    loading_method - Download method: Update/Insert (U/I), Delete/Insert(D/I)\n    process_deletions - records that are not in the input temporary will be deleted\n    process_existing_records - records that are not different will not be affected\n    chunk_row_number - the number of rows in the chunk to load into the database and apply to the table\n                       only for Update/Insert and DataFrame mode\n")),(0,o.kt)("p",null,"process_existing_records for U/I is enabled by default."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"source"),": Source"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"conn_id"),": Connection id"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"table_name"),": Table name for update"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"key"),": The key by which update. Avoid NULL for the key."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"deleted_flg_column"),": Field with the delete flag, takes the values 0/1"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwargs"),": ")),(0,o.kt)("h4",{id:"upload_and_update_insert"},"upload","_","and","_","update","_","insert"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def upload_and_update_insert(hook: PostgresHook, source_table: str, dataframe: pandas.DataFrame) -> None\n")),(0,o.kt)("p",null,"Load the DataFrame into the database and apply the table to the target."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hook"),": Hook for connecting to the database"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"source_table"),": Name for the temporary table in the database"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dataframe"),": DataFrame to apply to a table")),(0,o.kt)("h4",{id:"get_table_columns"},"get","_","table","_","columns"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef get_table_columns(table_name: str, conn: psycopg2_connection) -> list[str]\n")),(0,o.kt)("p",null,"Get a list of the names of its fields by the name of the table"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"table_name"),": "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"conn"),": ")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("p",null,"Tuple with field names"))}u.isMDXComponent=!0}}]);