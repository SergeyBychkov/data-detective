"use strict";(self.webpackChunkdata_detective_docusaurus=self.webpackChunkdata_detective_docusaurus||[]).push([[8450],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6637:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_label:"s3_load",title:"operators.sinks.s3_load"},c=void 0,s={unversionedId:"data_detective_airflow_api_reference/operators/sinks/s3_load",id:"data_detective_airflow_api_reference/operators/sinks/s3_load",isDocsHomePage:!1,title:"operators.sinks.s3_load",description:"S3Load Objects",source:"@site/docs/data_detective_airflow_api_reference/operators/sinks/s3_load.md",sourceDirName:"data_detective_airflow_api_reference/operators/sinks",slug:"/data_detective_airflow_api_reference/operators/sinks/s3_load",permalink:"/data-detective/docs/data_detective_airflow_api_reference/operators/sinks/s3_load",editUrl:"https://github.com/tinkoff/data-detective/edit/master/tools/doc-site/docs/data_detective_airflow_api_reference/operators/sinks/s3_load.md",tags:[],version:"current",frontMatter:{sidebar_label:"s3_load",title:"operators.sinks.s3_load"},sidebar:"tutorialSidebar",previous:{title:"s3_delete",permalink:"/data-detective/docs/data_detective_airflow_api_reference/operators/sinks/s3_delete"},next:{title:"append",permalink:"/data-detective/docs/data_detective_airflow_api_reference/operators/transformers/append"}},p=[{value:"S3Load Objects",id:"s3load-objects",children:[{value:"execute",id:"execute",children:[],level:4}],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"s3load-objects"},"S3Load Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class S3Load(TBaseOperator)\n")),(0,o.kt)("p",null,"Save data forom ",(0,o.kt)("inlineCode",{parentName:"p"},"bytes_column")," by the path ",(0,o.kt)("inlineCode",{parentName:"p"},"filename_column")," with metadata in ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata_column"),"\nin S3 with connection ",(0,o.kt)("inlineCode",{parentName:"p"},"conn_id")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Name of the source, put in the list\n    Connection id\n    Bucket name\n    The name of the column containing the path to the file in S3\n    The name of the column containing the data. Data type inside: bytes\n    The name of the column containing metadata. The column content should be empty or contain a dictionary with metadata.\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"source"),": List"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"conn_id"),": Text"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bucket"),": Text"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"filename_column"),": Text"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bytes_column"),": Text"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"metadata_column"),": Text"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"kwargs"),": Additional params for the TBaseOperator")),(0,o.kt)("h4",{id:"execute"},"execute"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def execute(context: Optional[dict])\n")),(0,o.kt)("p",null,"The download comes from via boto3.s3.inject.upload_fileobj"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Raises"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AirflowBadRequest"),": - at a non-existent bucket")))}u.isMDXComponent=!0}}]);